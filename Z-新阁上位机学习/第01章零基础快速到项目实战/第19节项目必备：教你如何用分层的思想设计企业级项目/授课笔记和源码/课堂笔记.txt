
***************************欢迎大家参加喜科堂互联教育.Net全栈开发和上位机课程**************************

课程主讲：常老师
课程网址：xiketang.ke.qq.com

全栈目标：从基础到企业级项目实战系列课程（C/S +  B/S 全栈开发方向）
全栈概念：.NET平台开发的全栈技术包括（C/S、B/S--前端+后台、.Net Core跨平台技术）

上位机目标：完全独立使用C#+数据库+通信协议开发工控上位机系统

课程分类：基础免费公开课  +  深入系统学习的付费VIP课程

联系我们：常老师QQ：2934008878     助教老师QQ：995551859（资料获取）

******************************************************************************************************

*****************************【如何用分层的思想设计企业级项目】*************************

为什么要项目分层？分析现有项目是否存在的问题？


学习面向对象编程，其实就是学习面向对象的一些列原则、方法、技巧、设计模式、经验等。

对象职责明确原则...

希望我们开发的程序能够具有高性能、高可扩展性、高维护性！

问题明确：

【1】在UI中，后台数据访问的代码和UI数据展示的代码，混编到一起。不足：代码混编容易让我们团队协作

带来困难，和后续维护很不方便。

【2】代码显得很不优雅。项目各个功能全部耦合到一起。也不符合我们OOP中，高内聚低耦合的做法。

解决方法：

按照任务职责，我们通常开发数据库应用程序，会有这样一些类的划分。

【1】UI：用来和用户交互：给用户展示数据、获取用户数据。

【2】数据访问类：用来封装数据库操作的各种方法。

第一、通用的数据访问类SQLHelper

第二、各种数据访问方法的封装。通用一般的数据访问类。

案例演示：

数据传递顺序：UI--》一般数据访问类--》通用数据访问类

好处：

第一、UI根本不知道，数据会保存到哪里！这点非常符合我们前面说的“高内聚低耦合”。

第二、数据访问类，更不用关心数据从哪里来！让职责更加明确。

UI和数据访问类之间达到解耦目的！对于后续项目扩展非常容易！

方法参数定义的经验：

如果我们写有一个方法，方法的参数最好控制在1-4个是最好的。

鉴于UI和数据访问类交互参数过多问题，我们提出使用“实体类”代替过多的参数！

【1】实体类概念：就是用来表示数据实体的类。（数据表中的一条数据，就是一个实体，数据表是实体集合）

【2】实体类设计：一般只包括属性，并且属性和数据表的列是映射关系。

 数据表列名称的时候，最好遵循Pascal命名法。

 要求数据表有多少列，实体类就应该“至少”有多少个属性。后面大家做项目的时候会用到扩展属性。

 并且数据类型要一致。

 int------- 》int
 
 字符类型--》string  （char、varchar、nvarchar、text..）

 浮点数---->double

 smalldatetime...---》DateTime

 实体类的名称，最好和数据表名称一样！

【3】实体类个数：一般有多少张数据表，就应该有多少个实体类。我们还可以根据需要添加扩展的实体类。

【4】实体类作用：

     第一、封装数据：也就是我们希望调用其他对象的时候，把参数封装到实体类的属性中。（参数打包）

     第二、传递数据：将数据通过实体类传递给被调用者，反之亦然。

PS：实践项目中，通常是先添加实体类，然后再增加数据访问类，和其他业务类。

    数据访问类命名：实体类名称 + Service   业务逻辑类命名：实体类名称 + Manager

【5】实体类好处：

     第一、方法调用之间参数变得非常精简。

     第二、我们使用非常方便，UI只需要把数据封装到实体类中。数据访问类只需要解析实体属性即可。

     第三、实体类是使用，使得方法调用的接口变得非常稳定。


基于实体对象的数据返回：

引出：我们通过实体类封装了零散的参数，打包后给数据访问方法。现在呢？数据访问方法需要把数据

返回给UI，数据是多条，也就是多个实体！也是零散的数据！因此我们收到启发，我们应该把数据封装到实体类

中，但是我们前面基础就讲到了泛型集合List<T>是实体的容器！所以，我们把每一条数据封装成实体对象后。

再放到List集合中，用List集合作为方法的返回值！

好处：

   第一，UI部分，我们根本就不知道，数据访问是从哪里查询数据的。我们只管使用集合即可！“高内聚低耦合”

   第二，数据访问部分，我们只管把数据封装到集合中，不管你怎么使用！UI是winform、web都是没有任何关系的。

其他需要改进的地方：

我们发现查询结果对象封装的时候，也是比较麻烦的。后续深入学习的时候，我们可以使用ORM框架解决。


――――――――――――――――――――――――――――――――――――――――――――――――――

《使用模块化分层来达到企业级项目要求》

基本的分层：UI + 数据访问 + 实体类（典型两层结构）

实体类：其实就是一个数据载体。

模块：在.NET平台，其实主要是指类库项目。

一个模块，可以包括一个或多个类库项目（dll）

Q：一个项目通常包括哪些模块？

【1】UI

【2】数据模块（一般数据访问类+通用数据访问类）

【3】业务模块（三层结构里面必须要有的，一般对应大项目）

【4】通信模块、通用类模块、服务模块...

三层结构

【1】UI-->【2】业务模块-->【3】数据模块   （实体模块是独立层）

公司上层-->中层（部门经理）-->员工

业务模块作用：第一，传递业务请求   第二，业务分解（在我们的预科中，一般用不到）

实现：

【1】添加4个模块

【2】添加引用：UI-->BLL-->DAL   (Models)

分层的最大优势：

1.不管哪一层业务变化，都不会对其他层有影响。

2.对于我们后续升级也带来很大的方便性。

3.项目团队开发，更方便。

**************************************************************************************************

******************************************************************************************************
全栈基础到项目学习，课程学习链接：https://ke.qq.com/course/60266
上位机从基础到项目，课程学习链接：https://ke.qq.com/course/301616
******************************************************************************************************
全栈VIP系统学习，课程链接：https://ke.qq.com/course/59314
上位机VIP系统学习，课程链接：https://ke.qq.com/course/289623
******************************************************************************************************

联系我们：常老师QQ：2934008878     助教老师QQ：995551859（更多资料获取）































































